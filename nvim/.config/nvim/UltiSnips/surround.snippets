global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

snippet sp "Parenthesis outside mathmode" w
(${1:${VISUAL}})`!p
if t[0] and t[0][0] not in [';', ':', ',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

snippet sb "Brackets outside mathmode" w
[${1:${VISUAL}}]`!p
if t[0] and t[0][0] not in [';', ':', ',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

snippet sc "Curly brackets outside mathmode" w
{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [';', ':', ',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0 
endsnippet

context "math()"
snippet '(\+|=|-?)Sp' "Parentheses" Ar
`!p
symbol = match.group(1) + ' ' if match.group(1) else ''
snip.rv = symbol`\left(  ${1:${VISUAL}} \right)`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet


context "math()"
snippet '(\+|=|-?)Sb' "Brackets" Ar
`!p
snip.rv = match.group(1) + ' ' if match.group(1) else ''
`\left[  ${1:${VISUAL}} \right]`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet '(\+|=|-?)Sc'  "Curly Brackets" Ar
`!p
snip.rv = match.group(1) + ' ' if match.group(1) else ''
`\left\\{  ${1:${VISUAL}} \right\\}`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet '(\+|=|-?)Sn'  "Norm" Ar
`!p
snip.rv = match.group(1) + ' ' if match.group(1) else ''
`\left\|  ${1:${VISUAL}} \right\|`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet


context "math()"
snippet '(\+|=|-?)(sp|ps)'  "Parentheses" Ar
`!p
snip.rv = match.group(1) + ' ' if match.group(1) else ''
`(${1:${VISUAL}})`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet '(\+|=|-?)sb'  "Brackets" iAr
`!p
snip.rv = match.group(1) + ' ' if match.group(1) else ''
`[${1:${VISUAL}}]`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet '(\+|=|-?)sc'  "Curly Brackets" Ar
`!p
snip.rv = match.group(1) + ' ' if match.group(1) else ''
`\\{${1:${VISUAL}}\\}`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet '(\+|=|-?)(?<![\\\w])sn'  "Norm" Ar
`!p
snip.rv = match.group(1) + ' ' if match.group(1) else ''
`\|${1:${VISUAL}}\|`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet lr, "<>" iA
\left< ${1:${VISUAL}} \right>`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet Abs "Absolute Value" iA
\left| ${1:${VISUAL}} \right|`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet abs "Absolute Value" iA
| ${1:${VISUAL}} |`!p
if t[0] and t[0][0] not in [',', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet
