global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
	return not math()

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

########## Functions ##########
context "math()"
snippet `([a-zA-Z0-9])(b|B)f` "Mathbf" Ar
\mathbf{`!p snip.rv=match.group(1)`}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `([a-zA-Z])(c|C)al` "Mathcal" Ar
\mathcal{`!p snip.rv=match.group(1).upper()`}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(\\\\)([a-zA-Z])` "Mathbb" Ar
\mathbb{`!p snip.rv=match.group(2).upper()`}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

########## Greek Letters ##########
context "math()"
snippet `(;a)|((?<![\a-zA-Z])alpha)` "Alpha" Ar
\alpha`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;A)|((?<![\a-zA-Z])Alpha)` "Alpha Uppercase" Ar
\Alpha`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;b)|((?<![\a-zA-Z])beta)` "Beta" Ar
\beta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;B)|((?<![\a-zA-Z])Beta)` "Beta Uppercase" Ar
\Beta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;g)|((?<![\a-zA-Z])gamma)` "Gamma" Ar
\gamma`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;G)|((?<![\a-zA-Z])Gamma)` "Gamma Uppercase" Ar
\Gamma`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;d)|((?<![\a-zA-Z])delta)` "Delta" Ar
\delta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;D)|((?<![\a-zA-Z])Delta)` "Delta Uppercase" Ar
\Delta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `((?<!\\)Eps)` "Epsilon Uppercase" Arw
\Epsilon`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet eps "Epsilon" Aw
\epsilon`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;e)|((?<![\a-zA-Z])eta)` "Eta" Ar
\eta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;E)|((?<![\a-zA-Z])Eta)` "Eta Uppercase" Ar
\Eta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;l)|((?<![\a-zA-Z])lambda)` "Lambda" Ar
\lambda`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;L)|((?<![\a-zA-Z])Lambda)` "Lambda Uppercase" Ar
\Lambda`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;m)|((?<![\a-zA-Z])mu)` "Mu" Ar
\mu`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;M)|((?<![\a-zA-Z])Mu)` "Mu Uppercase" Ar
\Mu`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;p)|((?<![\a-zA-Z])pi)` "Pi" Ar
\pi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;P)|((?<![\a-zA-Z])Pi)` "Pi Uppercase" Ar
\Pi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;s)|((?<![\a-zA-Z])sigma)` "Sigma" Ar
\sigma`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;S)|((?<![\a-zA-Z])Sigma)` "Sigma Uppercase" Ar
\Sigma`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;t)|((?<![\a-zA-Z])theta)` "Theta" Ar
\theta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;T)|((?<![\a-zA-Z])Theta)` "Theta Uppercase" Ar
\Theta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;o)|((?<![\a-zA-Z])omega)` "Omega" Ar
\omega`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;O)|((?<![\a-zA-Z])Omega)` "Omega Uppercase" Ar
\Omega`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;z)|((?<![\a-zA-Z])zeta)` "Zeta" Ar
\zeta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;Z)|((?<![\a-zA-Z])Zeta)` "Zeta Uppercase" Ar
\Zeta`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
#snippet `(;x)|((?<![\a-zA-Z])xi)` "Xi" Ar
snippet `(;x)` "Xi" Ar
\xi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;X)` "Xi Uppercase" Ar
\Xi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;r)|((?<![\a-zA-Z])rho)` "Rho" Ar
\rho`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;R)|((?<![\a-zA-Z])Rho)` "Rho Uppercase" Ar
\Rho`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;n)|((?<![\a-zA-Z])nu)` "Nu" Ar
\nu`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;N)|((?<![\a-zA-Z])Nu)` "Nu Uppercase" Ar
\Nu`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;f|\bphi)` "Phi" Ar
\phi`!p
if t[2] and t[2][0] not in [',',' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet `(;F)|((?<![\a-zA-Z])Phi)` "Phi Uppercase" Ar
\Phi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;c)|((?<![\a-zA-Z])chi)` "Chi" Ar
\chi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;C)|((?<![\a-zA-Z])Chi)` "Chi Uppercase" Ar
\Chi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;y)|((?<![\a-zA-Z])psi)` "Psi" Ar
\psi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;Y)|((?<![\a-zA-Z])Psi)` "Psi Uppercase" Ar
\Psi`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;w)|((?<![\a-zA-Z])tau)` "Tau" Ar
\tau`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;W)|((?<![\a-zA-Z])Tau)` "Tau Uppercase" Ar
\Tau`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;v)|((?<![\a-zA-Z])upsilon)` "Upsilon" Ar
\upsilon`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;V)|((?<![\a-zA-Z])Upsilon)` "Upsilon Uppercase" Ar
\Upsilon`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;k)|((?<![\a-zA-Z])kappa)` "Kappa" Ar
\kappa`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;K)|((?<![\a-zA-Z])Kappa)` "Kappa Uppercase" Ar
\Kappa`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;i)|((?<![\a-zA-Z])iota)` "Iota" Ar
\iota`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(;I)|((?<![\a-zA-Z])Iota)` "Iota Uppercase" Ar
\Iota`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

########## Probability ##########
snippet wp "with probability" i
with probability at least \(1 - ${1:delta}\)$0
endsnippet

context "math()"
snippet `(?<![\\\w])(pb|prob)` "Probability" Arw
\mathbb{P} \left[ ${1:${VISUAL}} \right]
endsnippet

context "math()"
snippet `(?<![\\\w])pe` "Expectation" Awr
\mathbb{E}\left[ ${1:${VISUAL}} \right]`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(?<![\\\w])pf` "Expectation" Awr
\mathbb{E}_{${1:\theta}}\left[ $2 \right]`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(?<![\\\w])(var|pv)` "Variance" Arw
\mathbb{V} \left[${1:${VISUAL}}\right]
endsnippet

context "math()"
snippet `(?<![\\\w])std` "Variance" Arw
\std ($1) $0
endsnippet

context "math()"
snippet `(?<![\\\w])(cov)` "Covariance" Arw
\operatorname{Cov}[${1:${VISUAL}}]
endsnippet

context "math()"
snippet iid "iid" Aw
\stackrel{\text{iid}}{\sim}
endsnippet

context "math()"
snippet indic "Indicator" Aw
\mathbf{1}_{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet \top "iid" A
\stackrel{\text{p}}{\to}
endsnippet

context "math()"
snippet \tod "iid" A
\stackrel{\text{d}}{\to}
endsnippet

context "math()"
snippet deq "Equal in distribution" A
 \stackrel{\text{d}}{=} 
endsnippet

context "not_math()"
snippet wp "with probability" i
with probability at least \(1 - ${1:delta}\)`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

########## Sets ##########
context "math()"
snippet empty "Empty Set" Aw
\varnothing`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

######## Linear Algebra ########

context "math()"
snippet `(\w)tn` "Tensor" Ar
\Tn{`!p snip.rv=match.group(1).upper()`}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet tn "Tensor" Aw
\Tn{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(\w)mx` "Matrix" Ar
\Mx{`!p snip.rv=match.group(1).upper()`}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet mx "Matrix" Aw
\Mx{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet `(\w)vc` "Vector" Ar
\Vc{`!p snip.rv=match.group(1).lower()`}`!p
if t[0] and t[0][0] not in [',',' ', '\'']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet vc "Vector" Aw
\Vc{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [',', ' ', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet
