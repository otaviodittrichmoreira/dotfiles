global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def not_math():
	return not math()

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

context "not_math()"
snippet it "Italics" w
\textit{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [';', ':', ',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "not_math()"
snippet bf "Bold" w
\textbf{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [';', ':', ',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "not_math()"
snippet ttt "Bold" w
\texttt{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [';', ':', ',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "not_math()"
snippet emph "Emphasize" w
\emph{${1:${VISUAL}}}`!p
if t[0] and t[0][0] not in [';', ':', ',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$0
endsnippet

context "math()"
snippet tt "text" iA
\text{${1:${VISUAL}}} $0
endsnippet

context "not_math()"
snippet `\.\s([a-z])` "Uppecase after dot" Ar
. `!p snip.rv = match.group(1).upper()`
endsnippet
